软件包管理

应用程序：
   
C语言:源代码-->(编译)二进制格式
脚本：解释器（二进制程序）

源代码 --> 编译 --> 链接 --> 运行

   程序:
      库
         静态库
         动态库

.so : Shared Object 共享对象

配置文件


程序的组成部分：
   二进制程序   : /bin /sbin
   库         : /lib
   配置文件    : /etc
   帮助文件    : /usr/share/man

根文件系统:
/bin  
/boot  
/dev  
/etc  
/home  
/lib  
/lib64  
/lost+found  
/media  
/mnt  
/opt  
/proc  
/root  
/sbin  
/selinux  
/srv  
/sys  
/tmp  
/usr  
/var

----------------------------------------------------------------------------------------------------
/bin,/sbin,/lib : 一般来讲，系统启动需要用到的程序都在这些目录里面，所以这些目录不能挂载额外的分区，必须在根文件系统分区上 

----------------------------------------------------------------------------------------------------
/usr/ : 操作系统核心分区，可以单独分区
   bin
   sbin
   lib
----------------------------------------------------------------------------------------------------
/usr/local : 建议单独分区
   bin
   sbin
   lib
   etc
   man
   
   第三方软件安装的目录，并且建议单独分区   
----------------------------------------------------------------------------------------------------
/proc
/sys
   
   这两个目录不能单独分区，而且默认是空的，是给内核用的
----------------------------------------------------------------------------------------------------
/dev : 设备，不能单独分区
   udev:
----------------------------------------------------------------------------------------------------
/root : 不能单独分区

----------------------------------------------------------------------------------------------------
/var : 建议单独分区

----------------------------------------------------------------------------------------------------
/boot : 存放内核，initrd(initramfs)
   
系统启动的过程：
POST--> BIOS(HD)-->(MBR)bootloader(文件系统结构;ext2,ext3,xfs)-->内核
----------------------------------------------------------------------------------------------------



软件包管理器
1、打包成一个文件：二进制程序，库文件、配置文件、帮助文件
2、生成数据库、追踪所安装的每一个文件

软件包管理器的核心功能
1、制作软件包
2、能够实现 安装、卸载、升级、查询、校验、数据库重建、验证数据包等工作

RedHat,SUSE : RPM (RPM is Package Manger)
Debian : dpt

依赖关系:
X-->Y-->Z

前端工具:yum (Yellowdog Update Modifier),  apt-get
后端工具:RPM,                              dpt


rpm命令:
   rpm:
      数据库位置:/var/lib/rpm
   rpmbuild:
   
rpm命名:
包:组成部分
   主包:
      bind-9.7.1-1.el5.i586.rpm
   子包:
      bind-libs-9.7.1-1.el5.i586.rpm
      bind-utils-9.7.1-1.el5.i586.rpm
包名格式:
   name-version-release.arch.rpm
   bind-major.minor.release-release.arch.rpm
   
主版本号:重大改进
次版本号:某个子功能发生重大改变
发行号:修正了部分bug，调整了一点功能

1、安装:
   rpm -i /PATH/TO/PACHAGE_FILE
       -h : 以#号显示进度,每个#号表示2%的进度
       -v : 显示详细的过程
       -vv: 更详细的过程
       --nodeps: 忽略依赖关系，但是安装之后，软件不能运行
       --force : 强行安装，可以实现重装或降级
       --replacepkgs : 重新安装，替换原有安装
       --oldpackage : 降级

   通常我们安装的时候，使用: rpm -ivh /PATH/TO/PACKAGE_FILE
   
2、查询:
   rpm -q PACKAGE_NAME 例如上面的例子: rpm -a bind, 不能将PACKAGE_NAME写成bind-9.7.1-1.el5.i586.rpm这种形式
   rpm -qa : 显示当前系统已经安装的所有包
   rpm -qi PACKAGE_NAME : 查询指定包的说明信息
   rpm -qc PACKAGE_NAME : 查询指定包安装的配置文件
   rpm -qd PACKAGE_NAME : 查询指定包安装的帮助文件
   rpm -qf /path/to/somefile : 查询指定的文件由哪个rpm包安装生成的
   rpm -q --scripts PACKAGE_NAME : 查询指定包中包含的脚本
   
   如果某rpm包尚未安装，我们需查询其说明信息，安装以后会生成的文件
   rpm -qpi /PATH/TO/PACKAGE_FILE (尚未安装) 查询指定包的说明信息
       -qpc: 查询指定包安装的配置文件
       -qpd: 查询指定包安装的帮助文件
       -qpl: 查询安装之后会生成哪些文件

3、升级
   rpm -Uvh /PATH/TO/PACKAGE_FILE : 如果装有老版本的则升级，否则，安装
   rpm -Fvh /PATH/TO/PACKAGE_FILE : 如果装有老版本的则升级，否则，退出
       --oldpackage : 降级
   
4、
    
   
   
       






 




























